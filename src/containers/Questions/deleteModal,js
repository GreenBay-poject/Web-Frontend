import React from "react";
//import Axios from 'axios';
//import { connect } from 'react-redux';

import { makeStyles } from "@material-ui/core/styles";
import Modal from "@material-ui/core/Modal";

import Fade from "@material-ui/core/Fade";
import { Box, Button, Grid } from "@material-ui/core";

const useStyles = makeStyles((theme) => ({
  modal: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    overflowY: "scroll",
  },
  modelpaper: {
    backgroundColor: theme.palette.background.paper,
    border: "2px solid #000",
    boxShadow: theme.shadows[5],
    padding: theme.spacing(2, 4, 3),
    width: 400,
  },
  progressBar: {
    width: "100%",
  },
  inputitems: {
    padding: theme.spacing(0, 0, 2),
  },
  postbutton: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    marginTop: "5px",
    backgroundColor: "#00796B",
    "&:hover": {
      backgroundColor: "#05574F",
      transform: "scale(1.01)",
    },
  },
}));

export default function TransitionsModal(props) {
  const classes = useStyles();
  const { email, open, handleClose, q_idForReply, isAuthenticated } = props;
  //const [quillVal, setQuillVal] = React.useState(false);

  const [inputIsValid, setInputIsValid] = useState({
    description: true,
  });

  const [stateObj, setStateObj] = useState({
    description: "",
  });
  const inputChangeHandler = useCallback(
    (event, inputId) => {
      let validationConst = inputDefinitions[inputId].validations;
      let isValid = checkValidity(validationConst, event.target.value);
      setInputIsValid(updateObject(inputIsValid, { [inputId]: isValid }));
      setStateObj(updateObject(stateObj, { [inputId]: event.target.value }));
    },
    [stateObj, inputIsValid]
  );

  const onSubmitHandler = useCallback(
    (event) => {
      const data = {
        email: email,
        answer: stateObj.description,
        question_id: q_idForReply,
      };
      if (isAuthenticated) {
        console.log("Hiiiiiiiiiii", data);
        answerQuestion(data).then((response) => {
          if (!response.error) {
            console.log("successfull");
          } else {
            console.log("unsuccessfull");
            console.log(response);
          }
        });
      }
    },
    [email, stateObj.description, isAuthenticated]
  );

  return (
    <React.Fragment>
      <Modal
        aria-labelledby="transition-modal-title"
        aria-describedby="transition-modal-description"
        className={classes.modal}
        open={open}
        onClose={handleClose}
        closeAfterTransition
        BackdropComponent={Backdrop}
        BackdropProps={{
          timeout: 500,
        }}
      >
        <Fade in={open}>
          <Box>
            <Box>Delete Question?</Box>
            <Grid contained direction="row">
              <Button>Yes</Button>
              <Button>No</Button>
            </Grid>
          </Box>
        </Fade>
      </Modal>
    </React.Fragment>
  );
}
